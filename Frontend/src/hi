// src/App.js
import { Route, Routes } from "react-router-dom"
import HomePage from "./Pages/HomePage"
import PatientRoutes from "./routes/PatientRoutes"
import DoctorRoutes from "./routes/DoctorRoutes"
import AdminRoutes from "./routes/AdminRoutes"

function App() {
  return (
    <Routes>
      <Route path="/admin/*" element={<AdminRoutes />} />
      <Route path="/doctor/*" element={<DoctorRoutes />} />
      <Route path="/patient/*" element={<PatientRoutes />} />
      <Route path="/" element={<HomePage />} />
    </Routes>
  )
}

export default App

import { Routes, Route, Navigate } from 'react-router-dom'
import AdminLogin from '../pages/admin/AdminLogin'
import AdminDashboard from '../pages/admin/AdminDashboard'
import UserManagement from '../pages/admin/UserManagement'
import AppointmentManagement from '../pages/admin/AppoimentManagement'
import Reports from '../pages/admin/Reports'

const AdminRoutes = () => {
  const isAuthenticated = !!localStorage.getItem('adminToken')

  return (
    <Routes>
      <Route 
        path="login" 
        element={isAuthenticated ? <Navigate to="/admin" /> : <AdminLogin />} 
      />
      {/* <Route 
        path="/" 
        element={isAuthenticated ? <AdminDashboard /> : <Navigate to="/admin/login" />}
      > */}
        <Route index element={<AdminDashboard />} />
        <Route path="users" element={<UserManagement />} />
        <Route path="appointments" element={<AppointmentManagement />} />
        <Route path="reports" element={<Reports />} />
      {/* </Route> */}
    </Routes>
  )
}

export default AdminRoutes"

import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-hot-toast'
import { FiLock, FiMail } from 'react-icons/fi'

const AdminLogin = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    
    try {
      // Dummy authentication
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      if (email === 'admin@example.com' && password === 'admin123') {
        localStorage.setItem('adminToken', 'dummy_admin_token')
        toast.success('Login successful')
        navigate('/admin')
      } else {
        throw new Error('Invalid credentials')
      }
    } catch (error) {
      toast.error(error.message || 'Login failed')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="w-full max-w-md space-y-8">
          <div className="text-center">
            <h2 className="mt-6 text-3xl font-bold text-gray-900">Admin Login</h2>
            <p className="mt-2 text-sm text-gray-600">
              Access the administration dashboard
            </p>
          </div>
          <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
            <div className="rounded-md shadow-sm space-y-4">
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  Email address
                </label>
                <div className="relative mt-1">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiMail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="admin@example.com"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password
                </label>
                <div className="relative mt-1">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiLock className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    id="password"
                    name="password"
                    type="password"
                    autoComplete="current-password"
                    required
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="••••••••"
                  />
                </div>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
                  loading ? 'opacity-75 cursor-not-allowed' : ''
                }`}
              >
                {loading ? 'Signing in...' : 'Sign in'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

export default AdminLogin

import { Outlet, Link, useNavigate } from 'react-router-dom'
import { useState, useEffect } from 'react'
import {  toast, ToastBar } from 'react-hot-toast'
import { Sidebar, Menu, MenuItem } from 'react-pro-sidebar'
import { FiUsers, FiCalendar, FiSettings, FiLogOut, FiHome, FiPieChart } from 'react-icons/fi'

export default function AdminDashboard() {
  const [collapsed, setCollapsed] = useState(false)
  const [toggled, setToggled] = useState(false)
  const navigate = useNavigate()

  const handleLogout = () => {
    localStorage.removeItem('adminToken')
    toast.success('Logged out successfully')
    navigate('/admin/login')
  }

//   useEffect(() => {
//     // Check authentication
//     if (!localStorage.getItem('adminToken')) {
//       navigate('/admin/login')
//     }
//   }, [navigate])

  return (
    <div className="flex h-screen">
      <Sidebar
        collapsed={collapsed}
        toggled={toggled}
        onToggle={setToggled}
        breakPoint="md"
        className="shadow-lg"
      >
        <div className="p-4 flex items-center justify-between">
          {!collapsed && <h2 className="text-xl font-bold">Admin Panel</h2>}
          <button 
            onClick={() => setCollapsed(!collapsed)}
            className="p-1 rounded hover:bg-gray-100"
          >
            {collapsed ? '→' : '←'}
          </button>
        </div>
        
        <Menu>
          <MenuItem icon={<FiHome />} component={<Link to="/admin" />}> Dashboard </MenuItem>
          <MenuItem icon={<FiUsers />} component={<Link to="/admin/users" />}> User Management </MenuItem>
          <MenuItem icon={<FiCalendar />} component={<Link to="/admin/appointments" />}> Appointments </MenuItem>
          <MenuItem icon={<FiPieChart />} component={<Link to="/admin/reports" />}> Reports </MenuItem>
          <MenuItem icon={<FiSettings />} component={<Link to="/admin/settings" />}> Settings </MenuItem>
          <MenuItem 
            icon={<FiLogOut />} 
            onClick={handleLogout}
            className="text-red-500 hover:text-red-700"
          >
            Logout
          </MenuItem>
        </Menu>
      </Sidebar>

      <main className="flex-1 overflow-auto">
        <div className="p-6">
          <Outlet />
        </div>
        {/* <ToastBar position="top-right" /> */}
      </main>
    </div>
  )
}

import { useState, useEffect } from 'react'
import { toast } from 'react-hot-toast'
import Pagination from '../../components/Pagination'
import { 
  FiEdit2, 
  FiEye, 
  FiLock, 
  FiSearch, 
  FiTrash2, 
  FiUnlock, 
  FiPlus,
  FiFilter,
  FiDownload,
  FiUpload,
  FiUserPlus
} from 'react-icons/fi'
import UserModal from '../../components/admin/user/UserModal'
import RoleFilter from '../../components/admin/user/RoleFilter'
import StatusFilter from '../../components/admin/user/StatusFilter'

const UserManagement = () => {
  const [users, setUsers] = useState([])
  const [loading, setLoading] = useState(true)
  const [currentPage, setCurrentPage] = useState(1)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedRole, setSelectedRole] = useState('all')
  const [selectedStatus, setSelectedStatus] = useState('all')
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [currentUser, setCurrentUser] = useState(null)
  const usersPerPage = 10

  // Generate more realistic dummy data
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const firstNames = ['John', 'Sarah', 'Michael', 'Emily', 'David', 'Jessica', 'Robert', 'Jennifer']
        const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Miller', 'Davis', 'Wilson']
        const specialties = ['Cardiology', 'Pediatrics', 'Dermatology', 'Neurology', 'Orthopedics']
        
        const dummyUsers = Array.from({ length: 45 }, (_, i) => {
          const firstName = firstNames[Math.floor(Math.random() * firstNames.length)]
          const lastName = lastNames[Math.floor(Math.random() * lastNames.length)]
          const role = i % 5 === 0 ? 'admin' : i % 3 === 0 ? 'doctor' : 'patient'
          
          return {
            id: i + 1,
            name: `${firstName} ${lastName}`,
            email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`,
            role,
            specialty: role === 'doctor' ? specialties[Math.floor(Math.random() * specialties.length)] : null,
            status: i % 7 === 0 ? 'blocked' : 'active',
            lastLogin: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toLocaleString(),
            phone: `(${Math.floor(100 + Math.random() * 900)}) ${Math.floor(100 + Math.random() * 900)}-${Math.floor(1000 + Math.random() * 9000)}`,
            joinedDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toLocaleDateString()
          }
        })
        
        setUsers(dummyUsers)
        setLoading(false)
      } catch (error) {
        toast.error('Failed to fetch users')
        setLoading(false)
      }
    }
    
    fetchUsers()
  }, [])

  const handleBlock = async (userId) => {
    try {
      // Dummy API call
      await new Promise(resolve => setTimeout(resolve, 500))
      
      setUsers(users.map(user => 
        user.id === userId 
          ? { ...user, status: user.status === 'active' ? 'blocked' : 'active' } 
          : user
      ))
      toast.success(`User ${users.find(u => u.id === userId).status === 'active' ? 'blocked' : 'unblocked'} successfully`)
    } catch (error) {
      toast.error('Operation failed')
    }
  }

  const handleDelete = async (userId) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        // Dummy API call
        await new Promise(resolve => setTimeout(resolve, 500))
        
        setUsers(users.filter(user => user.id !== userId))
        toast.success('User deleted successfully')
      } catch (error) {
        toast.error('Failed to delete user')
      }
    }
  }

  const handleEdit = (user) => {
    setCurrentUser(user)
    setIsModalOpen(true)
  }


  const handleSaveUser = (userData) => {
    if (userData.id) {
      // Update existing user
      setUsers(users.map(user => 
        user.id === userData.id ? { ...user, ...userData } : user
      ))
      toast.success('User updated successfully')
    } else {
      // Add new user
      const newUser = {
        ...userData,
        id: Math.max(...users.map(u => u.id)) + 1,
        status: 'active',
        lastLogin: new Date().toLocaleString(),
        joinedDate: new Date().toLocaleDateString()
      }
      setUsers([...users, newUser])
      toast.success('User added successfully')
    }
    setIsModalOpen(false)
  }


  // Filter users based on search term, role and status
  const filteredUsers = users.filter(user => {
    const matchesSearch = 
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (user.phone && user.phone.includes(searchTerm))
    
    const matchesRole = selectedRole === 'all' || user.role === selectedRole
    const matchesStatus = selectedStatus === 'all' || user.status === selectedStatus
    
    return matchesSearch && matchesRole && matchesStatus
  })

  // Get current users
  const indexOfLastUser = currentPage * usersPerPage
  const indexOfFirstUser = indexOfLastUser - usersPerPage
  const currentUsers = filteredUsers.slice(indexOfFirstUser, indexOfLastUser)

  const paginate = pageNumber => setCurrentPage(pageNumber)

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h2 className="text-2xl font-bold">User Management</h2>
          <p className="text-gray-600">
            {filteredUsers.length} {filteredUsers.length === 1 ? 'user' : 'users'} found
          </p>
        </div>
        
        <div className="flex flex-col md:flex-row gap-3 w-full md:w-auto">
          <div className="relative flex-grow">
            <input
              type="text"
              placeholder="Search users..."
              className="pl-10 pr-4 py-2 border rounded-lg w-full"
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value)
                setCurrentPage(1)
              }}
            />
            <FiSearch className="absolute left-3 top-3 text-gray-400" />
          </div>
          
          <div className="flex gap-2">
            <RoleFilter 
              selectedRole={selectedRole}
              onRoleChange={(role) => {
                setSelectedRole(role)
                setCurrentPage(1)
              }}
            />
            
            <StatusFilter
              selectedStatus={selectedStatus}
              onStatusChange={(status) => {
                setSelectedStatus(status)
                setCurrentPage(1)
              }}
            />
          </div>
        </div>
      </div>


      {loading ? (
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-3">Name</th>
                  <th className="text-left p-3">Email</th>
                  <th className="text-left p-3">Phone</th>
                  <th className="text-left p-3">Role</th>
                  <th className="text-left p-3">Specialty</th>
                  <th className="text-left p-3">Status</th>
                  <th className="text-left p-3">Last Login</th>
                  <th className="text-left p-3">Joined Date</th>
                  <th className="text-left p-3">Actions</th>
                </tr>
              </thead>
              <tbody>
                {currentUsers.length > 0 ? (
                  currentUsers.map(user => (
                    <tr key={user.id} className="border-b hover:bg-gray-50">
                      <td className="p-3 font-medium">{user.name}</td>
                      <td className="p-3 text-sm">{user.email}</td>
                      <td className="p-3 text-sm">{user.phone}</td>
                      <td className="p-3">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          user.role === 'admin' ? 'bg-purple-100 text-purple-800' :
                          user.role === 'doctor' ? 'bg-blue-100 text-blue-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {user.role}
                        </span>
                      </td>
                      <td className="p-3 text-sm">
                        {user.specialty || '-'}
                      </td>
                      <td className="p-3">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {user.status}
                        </span>
                      </td>
                      <td className="p-3 text-sm text-gray-600">{user.lastLogin}</td>
                      <td className="p-3 text-sm text-gray-600">{user.joinedDate}</td>
                      <td className="p-3">
                        <div className="flex gap-2">
                          <button 
                            onClick={() => handleBlock(user.id)}
                            className={`p-2 rounded-lg ${
                              user.status === 'active' 
                                ? 'text-red-600 bg-red-50 hover:bg-red-100' 
                                : 'text-green-600 bg-green-50 hover:bg-green-100'
                            }`}
                            title={user.status === 'active' ? 'Block user' : 'Unblock user'}
                          >
                            {user.status === 'active' ? <FiLock /> : <FiUnlock />}
                          </button>
                          <button 
                            onClick={() => handleEdit(user)}
                            className="p-2 text-yellow-600 bg-yellow-50 rounded-lg hover:bg-yellow-100" 
                            title="Edit"
                          >
                            <FiEdit2 />
                          </button>
                          <button 
                            onClick={() => handleDelete(user.id)}
                            className="p-2 text-red-600 bg-red-50 rounded-lg hover:bg-red-100" 
                            title="Delete"
                          >
                            <FiTrash2 />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="9" className="p-4 text-center text-gray-500">
                      No users found matching your criteria
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <Pagination
            itemsPerPage={usersPerPage}
            totalItems={filteredUsers.length}
            paginate={paginate}
            currentPage={currentPage}
          />
        </>
      )}

      {/* User Modal */}
      <UserModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        user={currentUser}
        onSave={handleSaveUser}
      />
    </div>
  )
}

export default UserManagement


import { useState, useEffect } from 'react'
import { toast } from 'react-hot-toast'
import { FiCalendar, FiClock, FiUser, FiSearch, FiFilter } from 'react-icons/fi'
import Pagination from '../../components/Pagination'

const AppointmentManagement = () => {
  const [appointments, setAppointments] = useState([])
  const [loading, setLoading] = useState(true)
  const [currentPage, setCurrentPage] = useState(1)
  const [filters, setFilters] = useState({
    status: 'all',
    date: '',
    doctor: ''
  })
  const appointmentsPerPage = 8

  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        // Dummy API call
        const dummyAppointments = Array.from({ length: 30 }, (_, i) => ({
          id: i + 1,
          patientName: `Patient ${i + 1}`,
          doctorName: `Dr. ${['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'][i % 5]}`,
          date: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toLocaleDateString(),
          time: `${9 + (i % 8)}:${i % 2 === 0 ? '00' : '30'}`,
          status: ['pending', 'confirmed', 'completed', 'cancelled'][i % 4],
          reason: ['Checkup', 'Follow-up', 'Emergency', 'Routine'][i % 4]
        }))
        
        setAppointments(dummyAppointments)
        setLoading(false)
      } catch (error) {
        toast.error('Failed to fetch appointments')
        setLoading(false)
      }
    }
    
    fetchAppointments()
  }, [])

  const handleStatusChange = async (appointmentId, newStatus) => {
    try {
      // Dummy API call
      await new Promise(resolve => setTimeout(resolve, 500))
      
      setAppointments(appointments.map(apt => 
        apt.id === appointmentId ? { ...apt, status: newStatus } : apt
      ))
      toast.success(`Appointment ${newStatus}`)
    } catch (error) {
      toast.error('Failed to update appointment')
    }
  }

  // Filter appointments
  const filteredAppointments = appointments.filter(apt => {
    return (
      (filters.status === 'all' || apt.status === filters.status) &&
      (filters.date === '' || apt.date.includes(filters.date)) &&
      (filters.doctor === '' || apt.doctorName.toLowerCase().includes(filters.doctor.toLowerCase()))
    )})

  // Get current appointments
  const indexOfLastAppointment = currentPage * appointmentsPerPage
  const indexOfFirstAppointment = indexOfLastAppointment - appointmentsPerPage
  const currentAppointments = filteredAppointments.slice(indexOfFirstAppointment, indexOfLastAppointment)

  const paginate = pageNumber => setCurrentPage(pageNumber)

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <h2 className="text-2xl font-bold">Appointment Management</h2>
        <div className="flex flex-col md:flex-row gap-3 mt-4 md:mt-0">
          <div className="relative">
            <select
              className="pl-10 pr-4 py-2 border rounded-lg appearance-none bg-white"
              value={filters.status}
              onChange={(e) => setFilters({...filters, status: e.target.value})}
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="confirmed">Confirmed</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
            <FiFilter className="absolute left-3 top-3 text-gray-400" />
          </div>
          <div className="relative">
            <input
              type="text"
              placeholder="Filter by doctor..."
              className="pl-10 pr-4 py-2 border rounded-lg"
              value={filters.doctor}
              onChange={(e) => setFilters({...filters, doctor: e.target.value})}
            />
            <FiUser className="absolute left-3 top-3 text-gray-400" />
          </div>
          <div className="relative">
            <input
              type="date"
              className="pl-10 pr-4 py-2 border rounded-lg"
              value={filters.date}
              onChange={(e) => setFilters({...filters, date: e.target.value})}
            />
            <FiCalendar className="absolute left-3 top-3 text-gray-400" />
          </div>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-3">Patient</th>
                  <th className="text-left p-3">Doctor</th>
                  <th className="text-left p-3">Date & Time</th>
                  <th className="text-left p-3">Reason</th>
                  <th className="text-left p-3">Status</th>
                  <th className="text-left p-3">Actions</th>
                </tr>
              </thead>
              <tbody>
                {currentAppointments.length > 0 ? (
                  currentAppointments.map(apt => (
                    <tr key={apt.id} className="border-b hover:bg-gray-50">
                      <td className="p-3">{apt.patientName}</td>
                      <td className="p-3">{apt.doctorName}</td>
                      <td className="p-3">
                        <div className="flex items-center">
                          <FiCalendar className="mr-1 text-gray-500" />
                          <span className="mr-3">{apt.date}</span>
                          <FiClock className="mr-1 text-gray-500" />
                          <span>{apt.time}</span>
                        </div>
                      </td>
                      <td className="p-3">{apt.reason}</td>
                      <td className="p-3">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          apt.status === 'confirmed' ? 'bg-blue-100 text-blue-800' :
                          apt.status === 'completed' ? 'bg-green-100 text-green-800' :
                          apt.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {apt.status}
                        </span>
                      </td>
                      <td className="p-3 space-x-2">
                        {apt.status === 'pending' && (
                          <>
                            <button
                              onClick={() => handleStatusChange(apt.id, 'confirmed')}
                              className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs hover:bg-blue-200"
                            >
                              Confirm
                            </button>
                            <button
                              onClick={() => handleStatusChange(apt.id, 'cancelled')}
                              className="px-2 py-1 bg-red-100 text-red-800 rounded text-xs hover:bg-red-200"
                            >
                              Cancel
                            </button>
                          </>
                        )}
                        {apt.status === 'confirmed' && (
                          <button
                            onClick={() => handleStatusChange(apt.id, 'completed')}
                            className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs hover:bg-green-200"
                          >
                            Complete
                          </button>
                        )}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className="p-4 text-center text-gray-500">
                      No appointments found
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <Pagination
            itemsPerPage={appointmentsPerPage}
            totalItems={filteredAppointments.length}
            paginate={paginate}
            currentPage={currentPage}
          />
        </>
      )}
    </div>
  )
}

export default AppointmentManagement

import { useState, useEffect } from 'react'
import { FiUsers, FiCalendar, FiActivity, FiDownload } from 'react-icons/fi'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'

const Reports = () => {
  const [reportType, setReportType] = useState('users')
  const [timeRange, setTimeRange] = useState('month')
  const [loading, setLoading] = useState(true)
  const [stats, setStats] = useState({})
  const [chartData, setChartData] = useState([])

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        
        // Dummy data based on report type and time range
        let dummyStats = {}
        let dummyChartData = []
        
        if (reportType === 'users') {
          dummyStats = {
            total: 1245,
            new: 42,
            active: 987,
            blocked: 58
          }
          
          dummyChartData = Array.from({ length: timeRange === 'month' ? 12 : 7 }, (_, i) => ({
            name: timeRange === 'month' ? 
              new Date(2023, i).toLocaleString('default', { month: 'short' }) : 
              ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i],
            newUsers: Math.floor(Math.random() * 50) + 10,
            activeUsers: Math.floor(Math.random() * 200) + 50
          }))
        } else if (reportType === 'appointments') {
          dummyStats = {
            total: 876,
            completed: 654,
            cancelled: 98,
            pending: 124
          }
          
          dummyChartData = Array.from({ length: timeRange === 'month' ? 12 : 7 }, (_, i) => ({
            name: timeRange === 'month' ? 
              new Date(2023, i).toLocaleString('default', { month: 'short' }) : 
              ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i],
            scheduled: Math.floor(Math.random() * 100) + 20,
            completed: Math.floor(Math.random() * 80) + 15,
            cancelled: Math.floor(Math.random() * 15) + 2
          }))
        } else {
          dummyStats = {
            revenue: 125600,
            expenses: 78600,
            profit: 47000,
            growth: 12.5
          }
          
          dummyChartData = Array.from({ length: timeRange === 'month' ? 12 : 7 }, (_, i) => ({
            name: timeRange === 'month' ? 
              new Date(2023, i).toLocaleString('default', { month: 'short' }) : 
              ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i],
            revenue: Math.floor(Math.random() * 20000) + 5000,
            expenses: Math.floor(Math.random() * 12000) + 3000,
            profit: Math.floor(Math.random() * 8000) + 2000
          }))
        }
        
        setStats(dummyStats)
        setChartData(dummyChartData)
        setLoading(false)
      } catch (error) {
        setLoading(false)
      }
    }
    
    fetchData()
  }, [reportType, timeRange])

  const handleDownload = () => {
    // Dummy download function
    alert(`Downloading ${reportType} report for ${timeRange}`)
  }

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <h2 className="text-2xl font-bold">Reports</h2>
        <div className="flex flex-col md:flex-row gap-3 mt-4 md:mt-0">
          <select
            className="px-4 py-2 border rounded-lg bg-white"
            value={reportType}
            onChange={(e) => setReportType(e.target.value)}
          >
            <option value="users">User Reports</option>
            <option value="appointments">Appointment Reports</option>
            <option value="financial">Financial Reports</option>
          </select>
          <select
            className="px-4 py-2 border rounded-lg bg-white"
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
          >
            <option value="month">Monthly</option>
            <option value="week">Weekly</option>
          </select>
          <button 
            onClick={handleDownload}
            className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            <FiDownload className="mr-2" />
            Export
          </button>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            {Object.entries(stats).map(([key, value]) => (
              <div key={key} className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-sm font-medium text-gray-500 capitalize">{key}</h3>
                    <p className="text-2xl font-bold">
                      {typeof value === 'number' && key !== 'growth' ? 
                        value.toLocaleString() : 
                        typeof value === 'number' ? 
                        `${value}%` : 
                        value}
                    </p>
                  </div>
                  <div className="p-3 rounded-full bg-indigo-100 text-indigo-600">
                    {reportType === 'users' ? <FiUsers /> : 
                     reportType === 'appointments' ? <FiCalendar /> : 
                     <FiActivity />}
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                {reportType === 'users' ? (
                  <>
                    <Bar dataKey="newUsers" fill="#8884d8" name="New Users" />
                    <Bar dataKey="activeUsers" fill="#82ca9d" name="Active Users" />
                  </>
                ) : reportType === 'appointments' ? (
                  <>
                    <Bar dataKey="scheduled" fill="#8884d8" name="Scheduled" />
                    <Bar dataKey="completed" fill="#82ca9d" name="Completed" />
                    <Bar dataKey="cancelled" fill="#ff8042" name="Cancelled" />
                  </>
                ) : (
                  <>
                    <Bar dataKey="revenue" fill="#8884d8" name="Revenue ($)" />
                    <Bar dataKey="expenses" fill="#ff8042" name="Expenses ($)" />
                    <Bar dataKey="profit" fill="#82ca9d" name="Profit ($)" />
                  </>
                )}
              </BarChart>
            </ResponsiveContainer>
          </div>
        </>
      )}
    </div>
  )
}

export default Reports



is there any problem in my code becuase when i go to any admin routes nothing is showing in screen also i want the sidebar which is in AdminDashboard to be in all pages other than admin login page